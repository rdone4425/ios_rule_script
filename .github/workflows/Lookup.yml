name: DNS Lookup for Domains

on:
  schedule:
    - cron: '0 0 1,16 * *'  # 每月1号和16号的0点运行
  workflow_dispatch:  # 允许手动触发

jobs:
  update-geoip:
    uses: ./.github/workflows/update-geoip.yml  # 修改为正确的文件名
    secrets: inherit  # 继承secrets

  dns-lookup:
    needs: update-geoip  # 等待 GeoIP 更新完成
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # 更新到 v4
      with:
        token: ${{ secrets.PAT }}
        
    - name: Set up Python
      uses: actions/setup-python@v4  # 更新到 v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dnspython geoip2 requests ipaddress
        
    - name: Create DNS lookup script
      run: |
        cat > dns_lookup.py << 'EOF'
        import dns.resolver
        import os
        from datetime import datetime
        import geoip2.database
        import ipaddress
        
        CLOUDFLARE_IPV4 = [
            '173.245.48.0/20', '103.21.244.0/22', '103.22.200.0/22', '103.31.4.0/22',
            '141.101.64.0/18', '108.162.192.0/18', '190.93.240.0/20', '188.114.96.0/20',
            '197.234.240.0/22', '198.41.128.0/17', '162.158.0.0/15', '104.16.0.0/13',
            '104.24.0.0/14', '172.64.0.0/13', '131.0.72.0/22'
        ]
        
        CLOUDFLARE_IPV6 = [
            '2400:cb00::/32', '2606:4700::/32', '2803:f800::/32', '2405:b500::/32',
            '2405:8100::/32', '2a06:98c0::/29', '2c0f:f248::/32'
        ]
        
        def is_cloudflare_ip(ip_str):
            try:
                ip = ipaddress.ip_address(ip_str)
                ip_networks = CLOUDFLARE_IPV4 if ip.version == 4 else CLOUDFLARE_IPV6
                return any(ip in ipaddress.ip_network(net) for net in ip_networks)
            except ValueError:
                return False

        def is_private_ip(ip_str):
            try:
                ip = ipaddress.ip_address(ip_str)
                return ip.is_private
            except ValueError:
                return False

        def is_china_ip(ip_str, reader):
            try:
                response = reader.country(ip_str)
                return response.country.iso_code == 'CN'
            except:
                return False
        
        def perform_dns_lookup():
            try:
                reader = geoip2.database.Reader('ios_rule_script/GeoLite2-Country.mmdb')
                
                with open('ios_rule_script/merged_domains.list', 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                resolver = dns.resolver.Resolver()
                resolver.timeout = 2
                resolver.lifetime = 2
                
                os.makedirs('ios_rule_script', exist_ok=True)
                
                ipv4_set = set()
                ipv6_set = set()
                cname_set = set()
                
                for line in lines:
                    line = line.strip()
                    if not line or line.startswith('#'):
                        continue
                        
                    try:
                        domain = None
                        if 'DOMAIN,' in line:
                            domain = line.split('DOMAIN,')[1]
                        elif 'DOMAIN-SUFFIX,' in line:
                            domain = line.split('DOMAIN-SUFFIX,')[1]
                        elif 'DOMAIN-KEYWORD,' in line:
                            continue
                        
                        if domain:
                            # 查询A记录 (IPv4)
                            try:
                                answers = resolver.resolve(domain, 'A')
                                for rdata in answers:
                                    ip = str(rdata.address)
                                    if not (is_private_ip(ip) or is_china_ip(ip, reader) or is_cloudflare_ip(ip)):
                                        ipv4_set.add(ip)
                            except Exception:
                                pass
                            
                            # 查询AAAA记录 (IPv6)
                            try:
                                answers = resolver.resolve(domain, 'AAAA')
                                for rdata in answers:
                                    ip = str(rdata.address)
                                    if not (is_private_ip(ip) or is_china_ip(ip, reader) or is_cloudflare_ip(ip)):
                                        ipv6_set.add(ip)
                            except Exception:
                                pass
                            
                            # 查询CNAME记录
                            try:
                                answers = resolver.resolve(domain, 'CNAME')
                                for rdata in answers:
                                    cname = str(rdata.target).rstrip('.')
                                    cname_set.add(cname)
                            except Exception:
                                pass
                            
                    except Exception as e:
                        print(f"Error processing {line}: {e}")
                        continue
                
                # 保存结果
                with open('ios_rule_script/dns_results_ipv4.txt', 'w', encoding='utf-8') as f:
                    for ip in sorted(ipv4_set):
                        f.write(f"{ip}\n")
                
                with open('ios_rule_script/dns_results_ipv6.txt', 'w', encoding='utf-8') as f:
                    for ip in sorted(ipv6_set):
                        f.write(f"{ip}\n")
                
                with open('ios_rule_script/dns_results_cname.txt', 'w', encoding='utf-8') as f:
                    for cname in sorted(cname_set):
                        f.write(f"{cname}\n")
                
                reader.close()
                return True
                
            except Exception as e:
                print(f"Error: {e}")
                return False
        
        if __name__ == "__main__":
            success = perform_dns_lookup()
            exit(0 if success else 1)
        EOF
        
    - name: Run DNS lookup script
      run: python dns_lookup.py
        
    - name: Commit and push results
      run: |
        git config --local user.name "GitHub Action"
        git config --local user.email "action@github.com"
        git add ios_rule_script/dns_results_ipv4.txt
        git add ios_rule_script/dns_results_ipv6.txt
        git add ios_rule_script/dns_results_cname.txt
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update DNS lookup results $(date '+%Y-%m-%d %H:%M:%S')" && git push)
